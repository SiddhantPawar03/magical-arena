<% layout('/layouts/boilerplate.ejs') %>

<div class="container my-5">
  <div class="row mb-4">
    <div class="col text-center">
      <h1>Magical Arena</h1>
      <p class="lead">Let the battle begin!</p>
    </div>
  </div>
  <div class="row">
    <div class="col-md-6">
      <div class="card text-center">
        <div class="card-body">
          <h2 class="card-title"><%= player1.name %></h2>
          <p class="card-text">Health: <span id="player1-health"><%= player1.health %></span></p>
          <p class="card-text">Strength: <%= player1.strength %></p>
          <p class="card-text">Attack: <%= player1.attack %></p>
          <button id="fight-button-player1" class="btn btn-primary" disabled>Fight</button>
        </div>
      </div>
    </div>
    <div class="col-md-6">
      <div class="card text-center">
        <div class="card-body">
          <h2 class="card-title"><%= player2.name %></h2>
          <p class="card-text">Health: <span id="player2-health"><%= player2.health %></span></p>
          <p class="card-text">Strength: <%= player2.strength %></p>
          <p class="card-text">Attack: <%= player2.attack %></p>
          <button id="fight-button-player2" class="btn btn-primary">Fight</button>
        </div>
      </div>
    </div>
  </div>
  <div class="row my-4">
    <div class="col text-center">
      <button id="reset-button" class="btn btn-danger">Reset</button>
    </div>
  </div>
  <div class="row">
    <div class="col">
      <div class="table-responsive">
        <table id="logs" class="table table-striped table-bordered">
          <thead>
            <tr>
              <th>Attacker</th>
              <th>Defender</th>
              <th>Attack Roll</th>
              <th>Attack Damage</th>
              <th>Defend Roll</th>
              <th>Defend Damage</th>
              <th>Actual Damage</th>
              <th>Defender Health</th>
            </tr>
          </thead>
          <tbody>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
  let player1 = { name: 'Player A', health: 50, strength: 5, attack: 10 };
  let player2 = { name: 'Player B', health: 100, strength: 10, attack: 5 };
  let currentTurn = 'player1';

  function rollDice() {
    return Math.floor(Math.random() * 6) + 1;
  }

  function fight(attacker, defender) {
    const attackRoll = rollDice();
    const defendRoll = rollDice();

    const attackDamage = attacker.attack * attackRoll;
    const defendDamage = defender.strength * defendRoll;

    const actualDamage = Math.max(0, attackDamage - defendDamage);

    defender.health = Math.max(0, defender.health - actualDamage);

    updateUI();
    logFight(attacker, defender, attackRoll, defendRoll, attackDamage, defendDamage, actualDamage);

    if (defender.health <= 0) {
      alert(`${attacker.name} wins!`);
      disableFightButtons();
    } else {
      toggleButtons();
    }
  }

  function updateUI() {
    document.getElementById('player1-health').textContent = player1.health;
    document.getElementById('player2-health').textContent = player2.health;
  }

  function logFight(attacker, defender, attackRoll, defendRoll, attackDamage, defendDamage, actualDamage) {
    const logsTable = document.getElementById('logs').getElementsByTagName('tbody')[0];
    const newRow = logsTable.insertRow();

    newRow.innerHTML = `
      <td>${attacker.name}</td>
      <td>${defender.name}</td>
      <td>${attackRoll}</td>
      <td>${attackDamage}</td>
      <td>${defendRoll}</td>
      <td>${defendDamage}</td>
      <td>${actualDamage}</td>
      <td>${defender.health}</td>
    `;
  }

  function resetGame() {
    player1 = { name: 'Player A', health: 50, strength: 5, attack: 10 };
    player2 = { name: 'Player B', health: 100, strength: 10, attack: 5 };
    document.getElementById('logs').getElementsByTagName('tbody')[0].innerHTML = '';
    currentTurn = 'player1';
    document.getElementById('fight-button-player1').disabled = false;
    document.getElementById('fight-button-player2').disabled = true;
    updateUI();
  }

  function toggleButtons() {
    if (currentTurn === 'player1') {
      document.getElementById('fight-button-player1').disabled = true;
      document.getElementById('fight-button-player2').disabled = false;
      currentTurn = 'player2';
    } else {
      document.getElementById('fight-button-player1').disabled = false;
      document.getElementById('fight-button-player2').disabled = true;
      currentTurn = 'player1';
    }
  }

  function disableFightButtons() {
    document.getElementById('fight-button-player1').disabled = true;
    document.getElementById('fight-button-player2').disabled = true;
  }

  document.getElementById('fight-button-player1').addEventListener('click', () => fight(player1, player2));
  document.getElementById('fight-button-player2').addEventListener('click', () => fight(player2, player1));
  document.getElementById('reset-button').addEventListener('click', resetGame);

  resetGame();
</script>

